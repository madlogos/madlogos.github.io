
{{% admonition abstract abstract %}}
记录了一则慕课作业。如果你也注册了这课，千万不要抄。
{{% /admonition %}}

## 其实这是edx慕课的作业

出于深度的技能焦虑，跑到edx上撸课，结果撸到一门偏前端的纯码农培训课。说出来能吓死你，哈佛【继续教育学院】（对，就是范玮琪读的那个）开的[用Python和Javascript撸网络编程](https://courses.edx.org/courses/course-v1:HarvardX+CS50W+Web/course/)。它的主要卖点是用了Flask框架，就是号称一个 .py + 一个 .html就能欢快地hello world的小快灵建站利器。我当时朴素地想，学会多快好省地做一个网站，将来再学一点小程序啥的，起码搞起数据科学工程产品来，或许能派上一丢丢的用场。再不济，也能在简历上自吹全栈工程师嘛。

事实很打脸。这个作业只是整个课程的五大作业里的一个，我拿出所有业余时间埋头苦干，做了足足两个礼拜。以这个效率去搬砖，你猜老板会用什么武功揍我？

## 作业的要求

要做个图书查询网络应用，首先

1. 自己想办法把压缩包里的[book.csv](https://cdn.cs50.net/web/2019/x/projects/1/project1.zip) 5000条图书信息导进数据库里
    1. 数据库自己到[heroku](https://www.heroku.com)上注册创建，订阅一个乞丐版
    2. 要用Postgresql
    
然后，要有以下功能

1. 能注册
2. 能登录
3. 能注销
4. 能根据ISBN、书名、作者查询书籍
5. 能点进具体一本书里
    1. 除了固有信息，还要利用Goodreads的API获取平均评分
    2. 能看到其他用户发的书评和评级
6. 能发书评和评级，但一个用户只能发一次
7. 能暴露API给人家用

## 准备

### 数据库

heroku已经被salesforce.com买了，以傻瓜式建站和贵著称。我也建了，但是要翻墙。反正就是个作业，所以我就本地弄了个sqlite数据库`db.db`。

建三张表，`mbr`，`book`和`review`。`review`表里`mbr_id`和`book_id`分别外键关联到`mbr`和`book`。为啥不用`user`？因为postgresql不同意我用这个表名，所以在sqlite里也这么叫。

```sql
CREATE TABLE IF NOT EXISTS book (
    id INTEGER PRIMARY KEY,
    isbn TEXT NOT NULL,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    year INTEGER NOT NULL
);
CREATE TABLE IF NOT EXISTS mbr (
    id INTEGER PRIMARY KEY,
    username TEXT NOT NULL,
    pwd TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS review (
    id INTEGER PRIMARY KEY,
    rev_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')),
    mbr_id INTEGER NOT NULL,
    book_id INTEGER NOT NULL,
    rating INTEGER,
    review TEXT
);
```

再把`books.csv`里的数据导进去。我是坚定的pandas粉，所以直接把csv读进pandas再一口气灌进sqlite里。面对postgresql我也这么干。

```python
import sqlite3
import pandas as pd
conn = sqlite3.connect('db.db')
cur = conn.cursor()
if cur.execute('select count(*) from book;').fetchone()[0] == 0:
    df = pd.read_csv(r'books.csv')
    df.to_sql(name='book', con=conn, if_exists='append', index=False)
cur.close()
conn.close()
```

### 其它

当然，python那边得把python装好。我就直接用anaconda了。此外，需要把`Flask`，`Flask-Session`，`psycopg2-binary`和`SQKAlchemy`几个包都装上，`conda`/`pip`爱谁谁。 

[Goodreads](www.goodreads.com)是个书评网站（也被墙了）。需要自己上去注册账号，申请API开发密钥。


## 开工

### 项目结构

```
- application.py
- /static
    - /css
        - style.css
        - star-rating.min.css
    - /js
        - main.js
        - star-rating.min.js
- /templates
    - base.html
    - book.html
    - index.html
    - login.html
    - register.html
- db.db
```

- application.py是后端，所有后台功能代码都写在上面。
- static文件夹放静态文件，css和js这种。叫assets也行。
- templates文件夹放各类html模板，这些模板都是用html+jinja2语法写的宏。

### 基础模板

base.html是框架模板。简单写写。

- 样式主要靠bootstrap
- body部分放了几个通用块，head, flash, disp, control, misc之类。用jinja2结构{% block xxx %}{% endblock %}来占位。
    - 块里面基本都没有进一步定义。只是给导航条加了点功能，如果当前线程有用户登着，就显示个注销按钮，否则就没有。
    - flash块比较特别，定义了一个比较通用的flash渲染宏，到时候只需要在后台.py里套用`flash`函数就能实现告警框。


```html
<!DOCTYPE html>
<html lang='en'>
    <head>
        <meta CharacterSet='UTF-8'>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}{% endblock %}</title>
        <link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css">
        <link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css">
        <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
        <link rel="stylesheet" href="{{ url_for('static', filename='css/star-rating.min.css') }}">
        <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
        <script src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"></script>
        <script src="{{ url_for('static', filename='js/main.js') }}"></script>
        <script src="{{ url_for('static', filename='js/star-rating.min.js') }}"></script>
    </head>
    <body>
        <!-- head -->
        <nav id="navbar" class="navbar navbar-default" role="navigation">
            <div class="container-fluid">
                <div class="navbar-header">
                    <a class="navbar-brand mb-0" href="#">Book Review</a>
                </div>
                {% if act_user is not none %}
                <form class="navbar-form navbar-right" action="{{ url_for('sign_off') }}" method="get">
                    <span>Welcome, {{ act_user['username'] }}.&nbsp;&nbsp;</span>
                    <button id="logout" class="btn btn-default btn-sm">Log out</button>
                </form>
                {% endif %}
            </div>
        </nav>
        <!-- flash -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    {{ message }}
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <!-- body -->
        <div class="container">            
            {% block control %}
            {% endblock %}            
        </div>
        <div class="container">            
            {% block disp %}
            {% endblock %}            
        </div>
        <div class="container">            
            {% block misc %}
            {% endblock %}            
        </div>
        <!-- bottom -->
        <div class="container">
            <footer class="footer fixed-bottom">
                <hr>
                <p>&copy; 2019 madlogos</p>
            </footer>
        </div>
    </body>
</html>
```

对应地，在application.py里定义一些基本代码。"db.db"被export到环境变量`DATABASE_URL`了。

```python
# -*- coding: UTF-8 -*-
import os
import requests
from flask import Flask, flash, jsonify, render_template, request, \
    redirect, session, url_for
from jinja2 import Markup
from flask_session import Session
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

app = Flask(__name__, static_folder='static')


# Check for environment variable
if not os.getenv("DATABASE_URL"):
    raise RuntimeError("DATABASE_URL is not set")

# Configure session to use filesystem
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Set up database
engine = create_engine(os.getenv("DATABASE_URL"))
db = scoped_session(sessionmaker(bind=engine))
sess = db()


@app.teardown_request
def remove_session(ex=None):
    db.remove()
```

### 登录

登录页login.html很简单，首先继承base.html的元素，然后在control块里放一个`form-signin`控件。对前端技术不熟，丑得很。

```html
{% extends "base.html" %}

{% block title %}
Sign In
{% endblock %}

{% block control %}
<form class="form-signin" action="{{ url_for('sign_in') }}" method="post">
    <h2 class="form-signin-heading">Please Sign In</h2>
    <label for="username" class="sr-only">Enter Your Username</label>
    <input type="text" name="username" class="form-control" placeholder="Username">
    <label for="password" class="sr-only">Enter Your Password</label>
    <input type="password" name="password" class="form-control" placeholder="Password">
    <label for="signIn" class="sr-only">Click</label>
    <button id="signIn" class="btn btn-lg btn-primary btn-block" >Sign In</button>        
</form>
<form class="form-signin" action="{{ url_for('sign_up') }}" method="get">
    <button id="signUp" class="btn btn-lg btn-default btn-block">Sign up now!</button>
</form>
{% endblock %}

{% block disp %}
&nbsp;
{% endblock %}

{% block misc %}
&nbsp;
{% endblock %}
```

后台部分写两个路由函数。主路由下，如果当前session没有用户登录，就转跳去登录页/login，否则直接进书籍列表页/index。如果进登录页，那么'GET'方法下跟主路由差不多逻辑，'POST'方法下（点按钮触发POST），就要校验用户名密码了。成功就进书籍列表，假如不对，就`flash`一个错误来。


```python
@app.route("/", methods=['GET'])
def home():
    """Home page
    """
    if session.get('act_user') is None:
        return redirect(url_for("sign_in"))
    else:
        return render_template("index.html", act_user=session.get('act_user'))


@app.route("/login", methods=['GET', 'POST'])
def sign_in():
    """Sign in
    """
    if request.method == 'GET':
        if session.get('act_user') is None:
            return render_template(
                "login.html", act_user=session.get("act_user"))
        else:
            return render_template(
                "index.html", act_user=session.get("act_user"))
    elif request.method == 'POST':
        username = request.form.get('username')
        pwd = request.form.get('password')
        mbrinfo = sess.execute(
            """SELECT id, username FROM mbr WHERE username = :username
            AND pwd = :pwd;""",
            {"username": username, "pwd": pwd}).fetchone()
        if mbrinfo is None:
            flash(Markup(
                """<i class='fa fa-2x fa-exclamation-circle'></i>
                User not exist or wrong password."""), 
                'danger')
        else:
            session['act_user'] = {'id': mbrinfo[0], 'username': mbrinfo[1]}
        return home()
```

### 注销

有登陆就有注销。反正base.html里注销按钮已经绑定了logout路由，所以只要定义logout路由的后台绑定函数就行了。登出后，清空`session['act_use']`对象，回到登录页。

```python
@app.route('/logout', methods=['GET'])
def sign_off():
    session.pop('act_user', None)
    flash(Markup(
        """<i class='fa fa-2x fa-check-square-o'></i>
        You have logged out."""), 'success')
    return home()
```

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask01-login.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### 注册

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask02-signup.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### 检索书籍

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask04-search.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### 书籍明细


效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask05-book.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### 评分评级

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask06-rate.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### API

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask07-API.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


### 响应式布局

效果如下。

<iframe src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/190916/flask03-responsive.mp4" width="960" height="440" allowFullScreen frameBorder="0"></iframe>


[完]

---

{{% figure src="https://gh-1251443721.cos.ap-chengdu.myqcloud.com/QRcode.jpg" width="50%" title="扫码关注我的的我的公众号" alt="扫码关注" %}}
